meanD = mean(methodD$Weight)
defects = read.csv("C:/Users/ecorp/Documents/Data 557/Data/defects.csv")
#View(defects)
methodA = subset(defects, Method == 'A', select = Weight)
methodB = subset(defects, Method == 'B', select = Weight)
methodC = subset(defects, Method == 'C', select = Weight)
methodD = subset(defects, Method == 'D', select = Weight)
meanA = mean(methodA$Weight)
meanB = mean(methodB$Weight)
meanC = mean(methodC$Weight)
meanD = mean(methodD$Weight)
zCrit =
bottom = sqrt(sd(methodA)^2/nrow(methodA) + sd(methodB)^2/nrow(methodB))
nrow(methodA)
nrow(methodB)
nrow(methodC)
nrow(methodD)
bottom = sqrt(sd(methodA)^2/nrow(methodA) + sd(methodB)^2/nrow(methodB))
defects = read.csv("C:/Users/ecorp/Documents/Data 557/Data/defects.csv")
#View(defects)
methodA = subset(defects, Method == 'A', select = Weight)
methodB = subset(defects, Method == 'B', select = Weight)
methodC = subset(defects, Method == 'C', select = Weight)
methodD = subset(defects, Method == 'D', select = Weight)
meanA = mean(methodA$Weight)
meanB = mean(methodB$Weight)
meanC = mean(methodC$Weight)
meanD = mean(methodD$Weight)
nA = nrow(methodA)
nB = nrow(methodB)
nC = nrow(methodC)
nD = nrow(methodD)
bottom = sqrt(sd(methodA)^2/nA + sd(methodB)^2/nB)
defects = read.csv("C:/Users/ecorp/Documents/Data 557/Data/defects.csv")
#View(defects)
methodA = subset(defects, Method == 'A', select = Weight)
methodB = subset(defects, Method == 'B', select = Weight)
methodC = subset(defects, Method == 'C', select = Weight)
methodD = subset(defects, Method == 'D', select = Weight)
meanA = mean(methodA$Weight)
meanB = mean(methodB$Weight)
meanC = mean(methodC$Weight)
meanD = mean(methodD$Weight)
nA = nrow(methodA)
nB = nrow(methodB)
nC = nrow(methodC)
nD = nrow(methodD)
sdA = sd(methodA)
defects = read.csv("C:/Users/ecorp/Documents/Data 557/Data/defects.csv")
#View(defects)
methodA = subset(defects, Method == 'A', select = Weight)
methodB = subset(defects, Method == 'B', select = Weight)
methodC = subset(defects, Method == 'C', select = Weight)
methodD = subset(defects, Method == 'D', select = Weight)
meanA = mean(methodA$Weight)
meanB = mean(methodB$Weight)
meanC = mean(methodC$Weight)
meanD = mean(methodD$Weight)
nA = nrow(methodA)
nB = nrow(methodB)
nC = nrow(methodC)
nD = nrow(methodD)
sdA = sd(methodA$Weight)
sdB = sd(methodB$Weight)
sdC = sd(methodC$Weight)
sdD = sd(methodD$Weight)
bottom = sqrt(sdA^2/nA + sdB^2/nB)
zAb = (meanA - meanB)/bottom
pAb = 2*(1-pnorm(z))
pAb
bottom = sqrt(sdA^2/nA + sdB^2/nB)
zAb = (meanA - meanB)/bottom
pAb = 2*(1-pnorm(zAb))
pAb
bottom = sqrt(sdA^2/nA + sdC^2/nC)
zAc = (meanA - meanC)/bottom
pAC = 2*(1-pnorm(zAc))
pAC
bottom = sqrt(sdA^2/nA + sdD^2/nD)
zAd = (meanA - meanD)/bottom
pAd = 2*(1-pnorm(zAd))
pAd
bottom = sqrt(sdA^2/nA + sdB^2/nB)
zAb = (meanA - meanB)/bottom
zAb
pAb = 2*(1-pnorm(zAb))
pAb
bottom = sqrt(sdA^2/nA + sdC^2/nC)
zAc = (meanA - meanC)/bottom
zAc
pAC = 2*(1-pnorm(zAc))
pAC
bottom = sqrt(sdA^2/nA + sdD^2/nD)
zAd = (meanA - meanD)/bottom
zAd
pAd = 2*(1-pnorm(zAd))
pAd
bottom = sqrt(sdA^2/nA + sdB^2/nB)
zAb = (meanA - meanB)/bottom
pAb = 2*(1-pnorm(zAb))
pAb
bottom = sqrt(sdA^2/nA + sdC^2/nC)
zAc = (meanA - meanC)/bottom
pAC = 2*(pnorm(zAc))
pAC
bottom = sqrt(sdA^2/nA + sdD^2/nD)
zAd = (meanA - meanD)/bottom
pAd = 2*(pnorm(zAd))
pAd
bottom = sqrt(sdB^2/nB + sdC^2/nC)
zBc = (meanB - meanC)/bottom
pBC = 2*(pnorm(zBc))
pBC
bottom = sqrt(sdB^2/nB + sdD^2/nD)
zBd = (meanB - meanD)/bottom
pBd = 2*(pnorm(zBd))
pBd
bottom = sqrt(sdB^2/nB + sdC^2/nC)
zBc = (meanB - meanC)/bottom
zBc
pBC = 2*(pnorm(zBc))
pBC
bottom = sqrt(sdB^2/nB + sdD^2/nD)
zBd = (meanB - meanD)/bottom
zBd
pBd = 2*(pnorm(zBd))
pBd
bottom = sqrt(sdB^2/nB + sdC^2/nC)
zBc = (meanB - meanC)/bottom
pBC = 2*(pnorm(zBc))
pBC
bottom = sqrt(sdB^2/nB + sdD^2/nD)
zBd = (meanB - meanD)/bottom
pBd = 2*(pnorm(zBd))
pBd
bottom = sqrt(sdC^2/nB + sdD^2/nD)
zCd = (meanC - meanD)/bottom
zCd
pCd = 2*(pnorm(zCd))
pCd
bottom = sqrt(sdC^2/nC + sdD^2/nD)
zCd = (meanC - meanD)/bottom
pCd = 2*(pnorm(zCd))
pCd
bottom = sqrt(sdC^2/nC + sdD^2/nD)
zCd = (meanC - meanD)/bottom
zCd
pCd = 2*(pnorm(zCd))
pCd
bottom = sqrt(sdC^2/nC + sdD^2/nD)
zCd = (meanC - meanD)/bottom
pCd = 2*(pnorm(zCd))
pCd
?aov
summary(aov(Weight ~ Method, data=defects))
knitr::opts_chunk$set(echo = TRUE)
leadExp = read.csv("C:/Users/ecorp/Documents/Data 557/Data/lead_study.csv")
View(leadExp)
?t.test
print(
t.test(
leadExp$SEX == 1, leadExp$SEX == 2,
mu = 0,
paired = false,
var.equal = true,
conf.level = .95
)
)
print(
t.test(
leadExp$SEX == 1, leadExp$SEX == 2,
alternative = "two.sided",
mu = 0,
paired = FALSE, # this is necessary
var.equal = TRUE, # this is necessary
conf.level = 0.95
)
)
leadExp = read.csv("C:/Users/ecorp/Documents/Data 557/Data/lead_study.csv")
View(leadExp)
mean(leadExp$SEX == 1)
mean(leadExp$SEX == 2)
leadExp = read.csv("C:/Users/ecorp/Documents/Data 557/Data/lead_study.csv")
#View(leadExp)
nrow(leadExp)
leadExp = read.csv("C:/Users/ecorp/Documents/Data 557/Data/lead_study.csv")
#View(leadExp)
men = leadExp[leadExp$SEX == 1, 3]
women = leadExp[leadExp$SEX == 2, 3]
print(
t.test(
men, women,
alternative = "two.sided",
mu = 0,
paired = FALSE, # this is necessary
var.equal = TRUE, # this is necessary
conf.level = 0.95
)
)
leadExp = read.csv("C:/Users/ecorp/Documents/Data 557/Data/lead_study.csv")
#View(leadExp)
men = leadExp[leadExp$SEX == 1, 3]
mean(men)
women = leadExp[leadExp$SEX == 2, 3]
leadExp = read.csv("C:/Users/ecorp/Documents/Data 557/Data/lead_study.csv")
#View(leadExp)
men = leadExp[leadExp$SEX == 1, 3]
View(men)
women = leadExp[leadExp$SEX == 2, 3]
ggplot
?ggplot
??ggplot
install.packages(ggplot)
"ggplot2"
install.packages("ggplot2")
qplot(data = leadExp$IQ ~ SEX)
leadExp = read.csv("C:/Users/ecorp/Documents/Data 557/Data/lead_study.csv")
View(leadExp)
men = leadExp[leadExp$SEX == 1, 3]
women = leadExp[leadExp$SEX == 2, 3]
boxplot(IQ~GROUP, data = leadExp)
summary(aov(IQ~GROUP, data=leadExp))
summary(aov(IQ~GROUP, data = leadExp))
summary(aov(IQ ~ GROUP, data=leadExp))
summary(aov(IQ ~ Sex, data=leadExp))
summary(aov(IQ ~ SEX, data=leadExp))
summary(aov(IQ ~ GROUP, data=leadExp))
?aov
summary(aov(IQ ~ factor(GROUP), data=leadExp))
nrow(leadExp$GROUP == 1)
nrow(leadExp$GROUP == 2)
nrow(leadExp$GROUP == 3)
nrow(leadExp[leadExp$GROUP == 1])
nrow(leadExp[leadExp$GROUP == 1, 2])
nrow(leadExp$GROUP == 2)
nrow(leadExp$GROUP == 3)
nrow(subset(leadExp, GROUP = 1))
nrow(leadExp$GROUP == 2)
nrow(leadExp$GROUP == 3)
nrow(subset(leadExp, GROUP == 1))
nrow(leadExp$GROUP == 2)
nrow(leadExp$GROUP == 3)
nrow(subset(leadExp, GROUP == 1))
nrow(subset(leadExp, GROUP == 2))
nrow(subset(leadExp, GROUP == 3))
print(
t.test(
leadExp$GROUP == 1, leadExp$GROUP == 2,
alternative = "two.sided",
mu = 0,
paired = FALSE, # this is necessary
var.equal = TRUE, # this is necessary
conf.level = 0.95
)
)
print(
t.test(
leadExp$GROUP == 1, leadExp$GROUP == 3,
alternative = "two.sided",
mu = 0,
paired = FALSE, # this is necessary
var.equal = TRUE, # this is necessary
conf.level = 0.95
)
)
print(
t.test(
leadExp$GROUP == 2, leadExp$GROUP == 3,
alternative = "two.sided",
mu = 0,
paired = FALSE, # this is necessary
var.equal = TRUE, # this is necessary
conf.level = 0.95
)
)
.05/3
boxplot(IQ~GROUP*SEX, data = leadExp)
boxplot(IQ~GROUP+SEX, data = leadExp)
boxplot(IQ~GROUP*SEX, data = leadExp)
leadExp = read.csv("C:/Users/ecorp/Documents/Data 557/Data/lead_study.csv")
View(leadExp)
men = leadExp[leadExp$SEX == 1, c(2,3)]
women = leadExp[leadExp$SEX == 2, c(2,3)]
leadExp = read.csv("C:/Users/ecorp/Documents/Data 557/Data/lead_study.csv")
#View(leadExp)
men = leadExp[leadExp$SEX == 1, c(2,3)]
View(men)
women = leadExp[leadExp$SEX == 2, c(2,3)]
print(
t.test(
men$GROUP == 1, women$GROUP == 1,
alternative = "two.sided",
mu = 0,
paired = FALSE, # this is necessary
var.equal = TRUE, # this is necessary
conf.level = 0.95
)
)
print(
t.test(
men$GROUP == 2, women$GROUP == 2,
alternative = "two.sided",
mu = 0,
paired = FALSE, # this is necessary
var.equal = TRUE, # this is necessary
conf.level = 0.95
)
)
print(
t.test(
men$GROUP == 3, women$GROUP == 3,
alternative = "two.sided",
mu = 0,
paired = FALSE, # this is necessary
var.equal = TRUE, # this is necessary
conf.level = 0.95
)
)
leadExp = read.csv("C:/Users/ecorp/Documents/Data 557/Data/lead_study.csv")
#View(leadExp)
men = leadExp[leadExp$SEX == 1, c(2,3)]
View(men$GROUP == 1)
women = leadExp[leadExp$SEX == 2, c(2,3)]
print(
t.test(
men[men$GROUP == 1, 2], women[women$GROUP == 1, 2],
alternative = "two.sided",
mu = 0,
paired = FALSE, # this is necessary
var.equal = TRUE, # this is necessary
conf.level = 0.95
)
)
print(
t.test(
men$GROUP == 2, women$GROUP == 2,
alternative = "two.sided",
mu = 0,
paired = FALSE, # this is necessary
var.equal = TRUE, # this is necessary
conf.level = 0.95
)
)
print(
t.test(
men$GROUP == 3, women$GROUP == 3,
alternative = "two.sided",
mu = 0,
paired = FALSE, # this is necessary
var.equal = TRUE, # this is necessary
conf.level = 0.95
)
)
print(
t.test(
men[men$GROUP == 1, 2], women[women$GROUP == 1, 2],
alternative = "two.sided",
mu = 0,
paired = FALSE, # this is necessary
var.equal = TRUE, # this is necessary
conf.level = 0.95
)
)
print(
t.test(
men[men$GROUP == 2, 2], women[women$GROUP == 2, 2],
alternative = "two.sided",
mu = 0,
paired = FALSE, # this is necessary
var.equal = TRUE, # this is necessary
conf.level = 0.95
)
)
print(
t.test(
men[men$GROUP == 3, 2], women[women$GROUP == 3, 2],
alternative = "two.sided",
mu = 0,
paired = FALSE, # this is necessary
var.equal = TRUE, # this is necessary
conf.level = 0.95
)
)
summary(aov(IQ ~ factor(GROUP), data=male))
summary(aov(IQ ~ factor(GROUP), data=men))
summary(aov(IQ ~ factor(GROUP), data=women))
print(
t.test(
men[men$GROUP == 1, 2], women[women$GROUP == 1, 2],
alternative = "two.sided",
mu = 0,
paired = FALSE, # this is necessary
var.equal = TRUE, # this is necessary
conf.level = 0.95
)
)
print(
t.test(
men[men$GROUP == 2, 2], women[women$GROUP == 2, 2],
alternative = "two.sided",
mu = 0,
paired = FALSE, # this is necessary
var.equal = TRUE, # this is necessary
conf.level = 0.95
)
)
print(
t.test(
men[men$GROUP == 3, 2], women[women$GROUP == 3, 2],
alternative = "two.sided",
mu = 0,
paired = FALSE, # this is necessary
var.equal = TRUE, # this is necessary
conf.level = 0.95
)
)
?cor\
?cor
knitr::opts_chunk$set(echo = TRUE)
sales = read.csv("C:/Users/ecorp/Documents/Data 557/Data/Sales.csv")
View(sales)
cor(sales, method = "pearson")
cor(sales)
sales = read.csv("C:/Users/ecorp/Documents/Data 557/Data/Sales.csv")
View(sales)
cor(sales)
cor(sales, use = "complete.obs")
?plot
plot(SQFT, LAST_SALE_PRICE, main = "Sale Price vs. Area of the House",
xlab="Area of the House", ylab="Sale Price")
plot(SQFT, LAST_SALE_PRICE, main = "Sale Price vs. Area of the House",
xlab="Area of the House", ylab="Sale Price", data = sales)
?scatterplot
??scatterplot
instal car
install car
install.packages(car)
install.packages("car")
?scatterplot
??scatterplot
attatch(sales)
attach(sales)
plot(SQFT, LAST_SALE_PRICE)
summary(lm(formula = LAST_SALE_PRICE ~ SQFT))
summary(lm(formula = LAST_SALE_PRICE ~ SQFT, data = sales))
summary(lm(formula = LAST_SALE_PRICE ~ SQFT + LOT_SIZE, data = sales))
# Set-up --------
data = read.csv("./04 Intermediate Files/master_dataset.csv")
setwd("~/Data 557/Project")
# Set-up --------
data = read.csv("./04 Intermediate Files/master_dataset.csv")
View(data)
?subset
fiction = subset(data, genre_category == "fiction", select = rating_count)
View(fiction)
fiction = subset(data, genre_category == "fiction", select = c(rating_count, genre_category))
View(fiction)
nonfiction = subset(data, genre_category == "nonfiction", select = c(rating_count, genre_category))
View(nonfiction)
nonfiction = subset(data, genre_category == "non-fiction", select = c(rating_count, genre_category))
View(nonfiction)
others = subset(data, genre_category == "others", select = c(rating_count, genre_category))
View(others)
?t.test
?subset
fiction = subset(data, genre_category == "fiction", select = rating_count)
View(fiction)
fiction = subset(data, genre_category == "fiction", select = rating_count)
nonfiction = subset(data, genre_category == "non-fiction", select = rating_count)
others = subset(data, genre_category == "others", select = rating_count, genre_category)
others = subset(data, genre_category == "others", select = rating_count)
?t.test
# Pairwise testing of fiction against nonfiction and nonfiction against others -------
model1 = t.test(fiction, y = nonfiction, var.equal = TRUE)
summary(model1)
# Pairwise testing of fiction against nonfiction and nonfiction against others -------
t.test(fiction, y = nonfiction, var.equal = TRUE)
# Checking  Variance assumptions ----
var(fiction)
# Pairwise testing of fiction against nonfiction and nonfiction against others -------
t.test(fiction, y = nonfiction, var.equal = TRUE)
# Checking  Variance assumptions ----
var(fiction)
var(nonfiction)
# Checking  Variance assumptions ----
var(fiction$rating_count)
# Set-up --------
options(scipen = 0)
# Checking  Variance assumptions ----
var(fiction$rating_count)
# Pairwise testing of fiction against nonfiction and nonfiction against others -------
t.test(fiction, y = nonfiction, var.equal = TRUE)
var(nonfiction)
# Set-up --------
options(scipen = -10)
# Checking  Variance assumptions ----
var(fiction$rating_count)
var(nonfiction)
# Pairwise testing of fiction against nonfiction and nonfiction against others -------
t.test(fiction, y = nonfiction, var.equal = FALSE)
var(others)
# Checking  Variance assumptions ----
var(fiction)
var(nonfiction)
var(others)
t.test(fiction, y = others)
# Set-up --------
options(scipen =
0)
# Pairwise testing of fiction against nonfiction and nonfiction against others -------
t.test(fiction, y = nonfiction, var.equal = FALSE)
t.test(fiction, y = others)
